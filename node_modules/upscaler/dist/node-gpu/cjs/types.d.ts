import { tf } from './dependencies.generated';
import type { ModelDefinitionObjectOrFn, ModelDefinition } from '@upscalerjs/core';
export declare type WarmupSizesByPatchSize = {
    patchSize: number;
    padding?: number;
};
export declare type NumericWarmupSizes = [number, number];
export interface UpscalerOptions {
    model?: ModelDefinitionObjectOrFn;
    warmupSizes?: WarmupSizes;
}
export declare type WarmupSizes = NumericWarmupSizes | WarmupSizesByPatchSize | (NumericWarmupSizes | WarmupSizesByPatchSize)[];
export declare type BASE64 = 'base64';
export declare type TENSOR = 'tensor';
export declare type ResultFormat = BASE64 | TENSOR | undefined;
export declare type MultiArgStringProgress = (amount: number, slice: string, row: number, col: number) => void;
export declare type MultiArgTensorProgress = (amount: number, slice: tf.Tensor3D, row: number, col: number) => void;
export declare type SingleArgProgress = (amount: number) => void;
export declare type Progress = SingleArgProgress | MultiArgStringProgress | MultiArgTensorProgress;
interface SharedArgs {
    signal?: AbortSignal;
    awaitNextFrame?: boolean;
}
export interface UpscaleArgs extends SharedArgs {
    output?: BASE64 | TENSOR;
    patchSize?: number;
    padding?: number;
    progress?: Progress;
    progressOutput?: BASE64 | TENSOR;
}
export interface PrivateUpscaleArgs extends Omit<UpscaleArgs, 'output' | 'progressOutput'> {
    output: BASE64 | TENSOR;
    progressOutput: BASE64 | TENSOR;
}
export declare type Layer = tf.layers.Layer;
export type { PackageInformation, ProcessFn, } from '@upscalerjs/core';
export interface ModelPackage {
    model: tf.LayersModel | tf.GraphModel;
    modelDefinition: ModelDefinition;
}
export declare type YieldedIntermediaryValue = undefined | tf.Tensor4D | tf.Tensor3D | Array<tf.Tensor3D | tf.Tensor4D | undefined>;
export interface WarmupArgs extends SharedArgs {
}
export declare type CheckValidEnvironment<T> = (input: T, opts: {
    output?: ResultFormat;
    progressOutput?: ResultFormat;
}) => void;
//# sourceMappingURL=types.d.ts.map