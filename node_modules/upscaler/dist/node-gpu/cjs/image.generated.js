"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkValidEnvironment = exports.tensorAsBase64 = exports.getImageAsTensor = exports.getInvalidChannelsOfTensor = exports.getInvalidImageSrcInput = exports.getInvalidInput = exports.getInvalidTensorError = void 0;
var fs_1 = __importDefault(require("fs"));
var dependencies_generated_1 = require("./dependencies.generated");
var utils_1 = require("./utils");
var core_1 = require("@upscalerjs/core");
var getInvalidTensorError = function (input) { return new Error([
    "Unsupported dimensions for incoming pixels: ".concat(input.shape.length, "."),
    'Only 3 or 4 rank tensors are supported.',
].join(' ')); };
exports.getInvalidTensorError = getInvalidTensorError;
var getInvalidInput = function (input) { return new Error([
    "Unknown input ".concat(JSON.stringify(input), " provided. Input must be either a rank 3 or 4 tensor,"),
    "a string representing a local path or http-accessible path to an image,",
    "a Uint8Array, or a Buffer.",
].join(' ')); };
exports.getInvalidInput = getInvalidInput;
var getInvalidImageSrcInput = function (input) { return new Error([
    "Image specified at path ".concat(input, " could not be found"),
].join(' ')); };
exports.getInvalidImageSrcInput = getInvalidImageSrcInput;
var getInvalidChannelsOfTensor = function (input) { return new Error([
    "Invalid channels, only 3 channels are supported at this time. You provided: \"".concat(input.shape.slice(-1)[0], "\"."),
    "Full tensor shape: ".concat(JSON.stringify(input.shape)),
].join(' ')); };
exports.getInvalidChannelsOfTensor = getInvalidChannelsOfTensor;
var isUint8Array = function (input) { return input.constructor === Uint8Array; };
var isBuffer = function (input) { return input.constructor === Buffer; };
var getTensorFromInput = function (input) {
    if (isUint8Array(input)) {
        return dependencies_generated_1.tf.node.decodeImage(input);
    }
    if (isBuffer(input)) {
        return dependencies_generated_1.tf.node.decodeImage(input);
    }
    if ((0, core_1.isTensor)(input)) {
        return input;
    }
    if ((0, core_1.isString)(input)) {
        try {
            var image = new Uint8Array(fs_1.default.readFileSync(input));
            return dependencies_generated_1.tf.node.decodeImage(image);
        }
        catch (err) {
            if (err instanceof Error && (err === null || err === void 0 ? void 0 : err.message.includes('no such file or directory'))) {
                throw (0, exports.getInvalidImageSrcInput)(input);
            }
            else {
                throw err;
            }
        }
    }
    throw (0, exports.getInvalidInput)(input);
};
var getImageAsTensor = function (input) { return __awaiter(void 0, void 0, void 0, function () {
    var tensor, expandedTensor;
    return __generator(this, function (_a) {
        tensor = getTensorFromInput(input);
        if (!(0, core_1.hasValidChannels)(tensor)) {
            throw (0, exports.getInvalidChannelsOfTensor)(tensor);
        }
        if ((0, core_1.isThreeDimensionalTensor)(tensor)) {
            expandedTensor = tensor.expandDims(0);
            tensor.dispose();
            return [2, expandedTensor];
        }
        if ((0, core_1.isFourDimensionalTensor)(tensor)) {
            return [2, tensor];
        }
        throw (0, exports.getInvalidTensorError)(tensor);
    });
}); };
exports.getImageAsTensor = getImageAsTensor;
var tensorAsBase64 = function (tensor) {
    var arr = (0, utils_1.tensorAsClampedArray)(tensor);
    return Buffer.from(arr).toString('base64');
};
exports.tensorAsBase64 = tensorAsBase64;
var checkValidEnvironment = function () { };
exports.checkValidEnvironment = checkValidEnvironment;
