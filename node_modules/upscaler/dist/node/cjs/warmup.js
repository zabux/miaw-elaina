"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancellableWarmup = exports.getSizesAsArray = exports.warmup = exports.getInvalidValueError = exports.ERROR_INVALID_WARMUP_VALUE = exports.isNumericWarmupSize = exports.isWarmupSizeByPatchSize = void 0;
var makeTick_1 = require("./makeTick");
var dependencies_generated_1 = require("./dependencies.generated");
var utils_1 = require("./utils");
var isWarmupSizeByPatchSize = function (size) {
    if (!size || typeof size !== 'object') {
        return false;
    }
    return 'patchSize' in size && typeof size['patchSize'] === 'number';
};
exports.isWarmupSizeByPatchSize = isWarmupSizeByPatchSize;
var isNumericWarmupSize = function (size) {
    return Boolean(size) && Array.isArray(size) && size.length === 2 && typeof size[0] === 'number' && typeof size[1] === 'number';
};
exports.isNumericWarmupSize = isNumericWarmupSize;
var ERROR_INVALID_WARMUP_VALUE_URL = 'https://upscalerjs.com/documentation/troubleshooting#invalid-warmup-value';
var ERROR_INVALID_WARMUP_VALUE = function (size) { return ([
    'Invalid value passed to warmup in warmupSizes:',
    JSON.stringify(size),
    "For more information, see ".concat(ERROR_INVALID_WARMUP_VALUE_URL, "."),
].join('\n')); };
exports.ERROR_INVALID_WARMUP_VALUE = ERROR_INVALID_WARMUP_VALUE;
var getInvalidValueError = function (size) { return new Error((0, exports.ERROR_INVALID_WARMUP_VALUE)(size)); };
exports.getInvalidValueError = getInvalidValueError;
var getWidthAndHeight = function (size) {
    if ((0, exports.isWarmupSizeByPatchSize)(size)) {
        var patchSize = size.patchSize, _a = size.padding, padding = _a === void 0 ? 0 : _a;
        var amount = patchSize + padding * 2;
        return [amount, amount,];
    }
    return size;
};
function warmup(modelPackage, sizes) {
    return __asyncGenerator(this, arguments, function warmup_1() {
        var _a, model, modelDefinition, _i, sizes_1, size, _b, width, height, dummyTensor, fns, i, fn;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4, __await(modelPackage)];
                case 1:
                    _a = _c.sent(), model = _a.model, modelDefinition = _a.modelDefinition;
                    _i = 0, sizes_1 = sizes;
                    _c.label = 2;
                case 2:
                    if (!(_i < sizes_1.length)) return [3, 13];
                    size = sizes_1[_i];
                    if (!(0, exports.isWarmupSizeByPatchSize)(size) && !(0, exports.isNumericWarmupSize)(size)) {
                        throw (0, exports.getInvalidValueError)(size);
                    }
                    _b = getWidthAndHeight(size), width = _b[0], height = _b[1];
                    dummyTensor = dependencies_generated_1.tf.zeros([1, height, width, 3,]);
                    return [4, __await([dummyTensor,])];
                case 3: return [4, _c.sent()];
                case 4:
                    _c.sent();
                    fns = [
                        modelDefinition.preprocess,
                        function (t) { return model.predict(t); },
                        modelDefinition.postprocess,
                    ].filter(Boolean);
                    i = 0;
                    _c.label = 5;
                case 5:
                    if (!(i < fns.length)) return [3, 9];
                    fn = fns[i];
                    dummyTensor = (0, utils_1.processAndDisposeOfTensor)(dummyTensor, fn);
                    return [4, __await([dummyTensor,])];
                case 6: return [4, _c.sent()];
                case 7:
                    _c.sent();
                    _c.label = 8;
                case 8:
                    i++;
                    return [3, 5];
                case 9:
                    dummyTensor.dispose();
                    return [4, __await(void 0)];
                case 10: return [4, _c.sent()];
                case 11:
                    _c.sent();
                    _c.label = 12;
                case 12:
                    _i++;
                    return [3, 2];
                case 13: return [2];
            }
        });
    });
}
exports.warmup = warmup;
var getSizesAsArray = function (sizes) {
    if (Array.isArray(sizes)) {
        if ((0, exports.isNumericWarmupSize)(sizes)) {
            return [sizes,];
        }
        for (var _i = 0, sizes_2 = sizes; _i < sizes_2.length; _i++) {
            var size = sizes_2[_i];
            if (!(0, exports.isWarmupSizeByPatchSize)(size) && !(0, exports.isNumericWarmupSize)(size)) {
                throw (0, exports.getInvalidValueError)(size);
            }
        }
        return sizes;
    }
    else if ((0, exports.isWarmupSizeByPatchSize)(sizes)) {
        return [sizes,];
    }
    throw (0, exports.getInvalidValueError)(sizes);
};
exports.getSizesAsArray = getSizesAsArray;
var cancellableWarmup = function (modelPackage, sizes, _a, internalArgs) {
    var _b = _a === void 0 ? {} : _a, _c = _b.signal, signal = _c === void 0 ? undefined : _c, _d = _b.awaitNextFrame, awaitNextFrame = _d === void 0 ? false : _d;
    return __awaiter(void 0, void 0, void 0, function () {
        var tick;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    tick = (0, makeTick_1.makeTick)(signal || internalArgs.signal, awaitNextFrame);
                    return [4, tick()];
                case 1:
                    _e.sent();
                    return [4, (0, utils_1.wrapGenerator)(warmup(modelPackage, (0, exports.getSizesAsArray)(sizes)), tick)];
                case 2:
                    _e.sent();
                    return [2];
            }
        });
    });
};
exports.cancellableWarmup = cancellableWarmup;
