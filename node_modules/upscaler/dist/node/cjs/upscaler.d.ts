import { tf } from './dependencies.generated';
import type { UpscalerOptions, ModelPackage, BASE64, WarmupArgs, UpscaleArgs, TENSOR, MultiArgStringProgress, MultiArgTensorProgress, WarmupSizes } from './types';
import type { Input } from './image.generated';
export declare class Upscaler {
    _opts: UpscalerOptions;
    _model: Promise<ModelPackage>;
    ready: Promise<void>;
    _abortController: AbortController;
    constructor(opts?: UpscalerOptions);
    execute(image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
        output: TENSOR;
        progress?: MultiArgStringProgress;
        progressOutput: BASE64;
    }): Promise<tf.Tensor3D>;
    execute(image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
        output?: BASE64;
        progress?: MultiArgTensorProgress;
        progressOutput: TENSOR;
    }): Promise<string>;
    execute(image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
        output: TENSOR;
        progress?: MultiArgTensorProgress;
        progressOutput?: unknown;
    }): Promise<tf.Tensor3D>;
    execute(image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
        output?: BASE64;
        progress?: MultiArgStringProgress;
        progressOutput?: unknown;
    }): Promise<string>;
    execute(image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
        output?: TENSOR | BASE64;
        progress?: MultiArgStringProgress | MultiArgTensorProgress;
        progressOutput?: unknown;
    }): Promise<tf.Tensor3D | string>;
    execute(image: Input): Promise<string>;
    upscale: {
        (image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
            output: TENSOR;
            progress?: MultiArgStringProgress;
            progressOutput: BASE64;
        }): Promise<tf.Tensor3D>;
        (image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
            output?: BASE64;
            progress?: MultiArgTensorProgress;
            progressOutput: TENSOR;
        }): Promise<string>;
        (image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
            output: TENSOR;
            progress?: MultiArgTensorProgress;
            progressOutput?: unknown;
        }): Promise<tf.Tensor3D>;
        (image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
            output?: BASE64;
            progress?: MultiArgStringProgress;
            progressOutput?: unknown;
        }): Promise<string>;
        (image: Input, options: Omit<UpscaleArgs, 'output' | 'progress' | 'progressOutput'> & {
            output?: TENSOR | BASE64;
            progress?: MultiArgStringProgress | MultiArgTensorProgress;
            progressOutput?: unknown;
        }): Promise<tf.Tensor3D | string>;
        (image: Input): Promise<string>;
    };
    warmup: (warmupSizes?: WarmupSizes, options?: WarmupArgs) => Promise<void>;
    abort: () => void;
    dispose: () => Promise<void>;
    getModel: () => Promise<ModelPackage>;
}
export default Upscaler;
//# sourceMappingURL=upscaler.d.ts.map