"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancellableUpscale = exports.upscale = exports.getCopyOfInput = exports.predict = exports.executeModel = exports.getPercentageComplete = exports.concatTensors = exports.getTensorDimensions = exports.GET_TENSOR_DIMENSION_ERROR_WIDTH_IS_UNDEFINED = exports.GET_TENSOR_DIMENSION_ERROR_HEIGHT_IS_UNDEFINED = exports.GET_TENSOR_DIMENSION_ERROR_PATCH_SIZE_IS_UNDEFINED = exports.GET_TENSOR_DIMENSION_ERROR_COL_IS_UNDEFINED = exports.GET_TENSOR_DIMENSION_ERROR_ROW_IS_UNDEFINED = exports.getRowsAndColumns = exports.getWidthAndHeight = exports.GET_UNDEFINED_TENSORS_ERROR = exports.GET_INVALID_SHAPED_TENSOR = exports.ERROR_INVALID_MODEL_PREDICTION = exports.ERROR_INVALID_TENSOR_PREDICTED = exports.WARNING_PROGRESS_WITHOUT_PATCH_SIZE = exports.WARNING_UNDEFINED_PADDING = void 0;
var dependencies_generated_1 = require("./dependencies.generated");
var image_generated_1 = require("./image.generated");
var utils_1 = require("./utils");
var core_1 = require("@upscalerjs/core");
var makeTick_1 = require("./makeTick");
var WARNING_UNDEFINED_PADDING_URL = 'https://upscalerjs.com/documentation/troubleshooting#padding-is-undefined';
exports.WARNING_UNDEFINED_PADDING = [
    '"padding" is undefined, but "patchSize" is explicitly defined.',
    'Without padding, patches of images often have visible artifacting at the seams. Defining an explicit padding will resolve the artifacting.',
    "For more information, see ".concat(WARNING_UNDEFINED_PADDING_URL, "."),
    'To hide this warning, pass an explicit padding of "0".',
].join('\n');
var WARNING_PROGRESS_WITHOUT_PATCH_SIZE_URL = 'https://upscalerjs.com/documentation/troubleshooting#progress-specified-without-patch-size';
exports.WARNING_PROGRESS_WITHOUT_PATCH_SIZE = [
    'The "progress" callback was provided but "patchSize" was not defined.',
    'Without a "patchSize", the "progress" callback will never be called.',
    "For more information, see ".concat(WARNING_PROGRESS_WITHOUT_PATCH_SIZE_URL, "."),
].join('\n');
var ERROR_INVALID_TENSOR_PREDICTED_URL = 'https://upscalerjs.com/documentation/troubleshooting#invalid-predicted-tensor';
var ERROR_INVALID_TENSOR_PREDICTED = function (tensor) { return [
    "The tensor returned by the model was not a valid rank-4 tensor. It's shape is ".concat(JSON.stringify(tensor.shape), ".}"),
    'UpscalerJS only supports models returning valid image-like data in four dimensional form.',
    "For more information, see ".concat(ERROR_INVALID_TENSOR_PREDICTED_URL, "."),
].join('\n'); };
exports.ERROR_INVALID_TENSOR_PREDICTED = ERROR_INVALID_TENSOR_PREDICTED;
var ERROR_INVALID_MODEL_PREDICTION_URL = 'https://upscalerjs.com/documentation/troubleshooting#invalid-model-prediction';
exports.ERROR_INVALID_MODEL_PREDICTION = [
    'The model output was not a valid tensor. UpscalerJS only supports models returning valid tensors.',
    'This is likely an error with the model itself, not UpscalerJS.',
    "For more information, see ".concat(ERROR_INVALID_MODEL_PREDICTION_URL, "."),
].join('\n');
var GET_INVALID_SHAPED_TENSOR = function (tensor) { return new Error("Invalid shape provided to getWidthAndHeight, expected tensor of rank 3 or 4: ".concat(JSON.stringify(tensor.shape))); };
exports.GET_INVALID_SHAPED_TENSOR = GET_INVALID_SHAPED_TENSOR;
var GET_UNDEFINED_TENSORS_ERROR = function () { return new Error('No defined tensors were passed to concatTensors'); };
exports.GET_UNDEFINED_TENSORS_ERROR = GET_UNDEFINED_TENSORS_ERROR;
var getWidthAndHeight = function (tensor) {
    if ((0, core_1.isFourDimensionalTensor)(tensor)) {
        return [tensor.shape[1], tensor.shape[2],];
    }
    if ((0, core_1.isThreeDimensionalTensor)(tensor)) {
        return [tensor.shape[0], tensor.shape[1],];
    }
    throw (0, exports.GET_INVALID_SHAPED_TENSOR)(tensor);
};
exports.getWidthAndHeight = getWidthAndHeight;
var getRowsAndColumns = function (pixels, patchSize) {
    var _a = (0, exports.getWidthAndHeight)(pixels), height = _a[0], width = _a[1];
    return {
        rows: Math.ceil(height / patchSize),
        columns: Math.ceil(width / patchSize),
    };
};
exports.getRowsAndColumns = getRowsAndColumns;
var checkAndAdjustStartingPosition = function (dimension, origin, sliceOrigin) {
    if (origin[dimension] < 0) {
        var amount = 0 - origin[dimension];
        origin[dimension] += amount;
        sliceOrigin[dimension] -= amount;
    }
};
var checkAndAdjustEndingPosition = function (size, dimension, endPosition, origin, sliceOrigin, sliceEndPosition) {
    if (endPosition[dimension] > size) {
        var amount = endPosition[dimension] - size;
        var compensatingAmount = 0;
        if (origin[dimension] - amount < 0) {
            compensatingAmount = 0 - (origin[dimension] - amount);
        }
        origin[dimension] -= amount - compensatingAmount;
        endPosition[dimension] -= amount;
        var sliceAmount = amount - compensatingAmount;
        sliceOrigin[dimension] += sliceAmount;
        sliceEndPosition[dimension] += sliceAmount;
    }
};
var checkAndAdjustSliceSize = function (dimension, size, sliceEndPosition) {
    if (sliceEndPosition[dimension] > size[dimension]) {
        sliceEndPosition[dimension] = size[dimension];
    }
};
exports.GET_TENSOR_DIMENSION_ERROR_ROW_IS_UNDEFINED = new Error('Row is undefined');
exports.GET_TENSOR_DIMENSION_ERROR_COL_IS_UNDEFINED = new Error('Column is undefined');
exports.GET_TENSOR_DIMENSION_ERROR_PATCH_SIZE_IS_UNDEFINED = new Error('Patch Size is undefined');
exports.GET_TENSOR_DIMENSION_ERROR_HEIGHT_IS_UNDEFINED = new Error('Height is undefined');
exports.GET_TENSOR_DIMENSION_ERROR_WIDTH_IS_UNDEFINED = new Error('Width is undefined');
var getTensorDimensions = function (_a) {
    var row = _a.row, col = _a.col, patchSize = _a.patchSize, height = _a.height, width = _a.width, _b = _a.padding, padding = _b === void 0 ? 0 : _b;
    if (row === undefined) {
        throw exports.GET_TENSOR_DIMENSION_ERROR_ROW_IS_UNDEFINED;
    }
    if (col === undefined) {
        throw exports.GET_TENSOR_DIMENSION_ERROR_COL_IS_UNDEFINED;
    }
    if (patchSize === undefined) {
        throw exports.GET_TENSOR_DIMENSION_ERROR_PATCH_SIZE_IS_UNDEFINED;
    }
    if (height === undefined) {
        throw exports.GET_TENSOR_DIMENSION_ERROR_HEIGHT_IS_UNDEFINED;
    }
    if (width === undefined) {
        throw exports.GET_TENSOR_DIMENSION_ERROR_WIDTH_IS_UNDEFINED;
    }
    var yPatchSize = patchSize;
    var xPatchSize = patchSize;
    if (yPatchSize > height) {
        yPatchSize = height;
    }
    if (xPatchSize > width) {
        xPatchSize = width;
    }
    var origin = [
        row * patchSize - padding,
        col * patchSize - padding,
    ];
    var sliceOrigin = [padding, padding,];
    checkAndAdjustStartingPosition(0, origin, sliceOrigin);
    checkAndAdjustStartingPosition(1, origin, sliceOrigin);
    var endPosition = [
        origin[0] + yPatchSize + padding * 2,
        origin[1] + xPatchSize + padding * 2,
    ];
    var sliceEndPosition = [
        sliceOrigin[0] + yPatchSize,
        sliceOrigin[1] + xPatchSize,
    ];
    checkAndAdjustEndingPosition(height, 0, endPosition, origin, sliceOrigin, sliceEndPosition);
    checkAndAdjustEndingPosition(width, 1, endPosition, origin, sliceOrigin, sliceEndPosition);
    var size = [
        endPosition[0] - origin[0],
        endPosition[1] - origin[1],
    ];
    checkAndAdjustSliceSize(0, size, sliceEndPosition);
    checkAndAdjustSliceSize(1, size, sliceEndPosition);
    var sliceSize = [
        sliceEndPosition[0] - sliceOrigin[0],
        sliceEndPosition[1] - sliceOrigin[1],
    ];
    return {
        origin: origin,
        sliceOrigin: sliceOrigin,
        size: size,
        sliceSize: sliceSize,
    };
};
exports.getTensorDimensions = getTensorDimensions;
function concatTensors(tensors, axis) {
    if (axis === void 0) { axis = 0; }
    var definedTensors = [];
    for (var i = 0; i < tensors.length; i++) {
        var tensor = tensors[i];
        if (tensor !== undefined) {
            definedTensors.push(tensor);
        }
    }
    if (definedTensors.length === 0) {
        throw (0, exports.GET_UNDEFINED_TENSORS_ERROR)();
    }
    var concatenatedTensor = dependencies_generated_1.tf.concat(definedTensors, axis);
    tensors.forEach(function (tensor) { return tensor === null || tensor === void 0 ? void 0 : tensor.dispose(); });
    return concatenatedTensor;
}
exports.concatTensors = concatTensors;
var getPercentageComplete = function (row, col, columns, total) {
    var index = row * columns + col + 1;
    var percent = index / total;
    return percent;
};
exports.getPercentageComplete = getPercentageComplete;
var executeModel = function (model, pixels) {
    var predictedPixels = model.predict(pixels);
    if (!(0, core_1.isTensor)(predictedPixels)) {
        throw new Error(exports.ERROR_INVALID_MODEL_PREDICTION);
    }
    if ((0, core_1.isFourDimensionalTensor)(predictedPixels)) {
        return predictedPixels;
    }
    throw new Error((0, exports.ERROR_INVALID_TENSOR_PREDICTED)(predictedPixels));
};
exports.executeModel = executeModel;
function predict(pixels, _a, _b, _c) {
    var output = _a.output, progress = _a.progress, patchSize = _a.patchSize, padding = _a.padding, progressOutput = _a.progressOutput;
    var model = _b.model, modelDefinition = _b.modelDefinition;
    var imageSize = _c.imageSize, inputSize = _c.inputSize;
    return __asyncGenerator(this, arguments, function predict_1() {
        var scale, _d, height, width, _e, rows, columns, upscaledTensor, total, row, colTensor, col, _f, origin_1, size, sliceOrigin, sliceSize, slicedPixels, prediction_1, startSlice, endSlice, slicedPrediction, processedPrediction, percent, squeezedTensor_1, src, processedUpscaledTensor, squeezedTensor_2, prediction, postprocessedTensor, squeezedTensor;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    scale = modelDefinition.scale || 1;
                    if (inputSize === undefined && patchSize && padding === undefined) {
                        (0, utils_1.warn)(exports.WARNING_UNDEFINED_PADDING);
                    }
                    if (!patchSize) return [3, 30];
                    _d = pixels.shape.slice(1), height = _d[0], width = _d[1];
                    _e = (0, exports.getRowsAndColumns)(pixels, patchSize), rows = _e.rows, columns = _e.columns;
                    return [4, __await(void 0)];
                case 1: return [4, _g.sent()];
                case 2:
                    _g.sent();
                    upscaledTensor = void 0;
                    total = rows * columns;
                    row = 0;
                    _g.label = 3;
                case 3:
                    if (!(row < rows)) return [3, 26];
                    colTensor = void 0;
                    return [4, __await([colTensor, upscaledTensor,])];
                case 4: return [4, _g.sent()];
                case 5:
                    _g.sent();
                    col = 0;
                    _g.label = 6;
                case 6:
                    if (!(col < columns)) return [3, 22];
                    _f = (0, exports.getTensorDimensions)({
                        row: row,
                        col: col,
                        patchSize: patchSize,
                        padding: padding,
                        height: height,
                        width: width,
                    }), origin_1 = _f.origin, size = _f.size, sliceOrigin = _f.sliceOrigin, sliceSize = _f.sliceSize;
                    return [4, __await([upscaledTensor, colTensor,])];
                case 7: return [4, _g.sent()];
                case 8:
                    _g.sent();
                    slicedPixels = pixels.slice([0, origin_1[0], origin_1[1],], [-1, size[0], size[1],]);
                    return [4, __await([upscaledTensor, colTensor, slicedPixels,])];
                case 9: return [4, _g.sent()];
                case 10:
                    _g.sent();
                    prediction_1 = (0, exports.executeModel)(model, slicedPixels);
                    slicedPixels.dispose();
                    return [4, __await([upscaledTensor, colTensor, prediction_1,])];
                case 11: return [4, _g.sent()];
                case 12:
                    _g.sent();
                    startSlice = [0, sliceOrigin[0] * scale, sliceOrigin[1] * scale,];
                    endSlice = [-1, sliceSize[0] * scale, sliceSize[1] * scale,];
                    slicedPrediction = prediction_1.slice(startSlice, endSlice);
                    prediction_1.dispose();
                    return [4, __await([upscaledTensor, colTensor, slicedPrediction,])];
                case 13: return [4, _g.sent()];
                case 14:
                    _g.sent();
                    processedPrediction = (0, utils_1.processAndDisposeOfTensor)(slicedPrediction, modelDefinition.postprocess, (0, utils_1.scaleOutput)(modelDefinition.outputRange));
                    return [4, __await([upscaledTensor, colTensor, processedPrediction,])];
                case 15: return [4, _g.sent()];
                case 16:
                    _g.sent();
                    if (progress !== undefined && (0, utils_1.isProgress)(progress)) {
                        percent = (0, exports.getPercentageComplete)(row, col, columns, total);
                        if ((0, utils_1.isSingleArgProgress)(progress)) {
                            progress(percent);
                        }
                        else {
                            squeezedTensor_1 = processedPrediction.squeeze();
                            if ((0, utils_1.isMultiArgTensorProgress)(progress, output, progressOutput)) {
                                progress(percent, squeezedTensor_1, row, col);
                            }
                            else {
                                src = (0, image_generated_1.tensorAsBase64)(squeezedTensor_1);
                                squeezedTensor_1.dispose();
                                progress(percent, src, row, col);
                            }
                        }
                    }
                    return [4, __await([upscaledTensor, colTensor, processedPrediction,])];
                case 17: return [4, _g.sent()];
                case 18:
                    _g.sent();
                    colTensor = concatTensors([colTensor, processedPrediction,], 2);
                    processedPrediction.dispose();
                    return [4, __await([upscaledTensor, colTensor,])];
                case 19: return [4, _g.sent()];
                case 20:
                    _g.sent();
                    _g.label = 21;
                case 21:
                    col++;
                    return [3, 6];
                case 22:
                    upscaledTensor = concatTensors([upscaledTensor, colTensor,], 1);
                    colTensor.dispose();
                    return [4, __await([upscaledTensor,])];
                case 23: return [4, _g.sent()];
                case 24:
                    _g.sent();
                    _g.label = 25;
                case 25:
                    row++;
                    return [3, 3];
                case 26:
                    processedUpscaledTensor = (0, utils_1.processAndDisposeOfTensor)(upscaledTensor.clone(), (0, utils_1.trimInput)(imageSize, scale));
                    upscaledTensor === null || upscaledTensor === void 0 ? void 0 : upscaledTensor.dispose();
                    return [4, __await([processedUpscaledTensor,])];
                case 27: return [4, _g.sent()];
                case 28:
                    _g.sent();
                    squeezedTensor_2 = processedUpscaledTensor.squeeze();
                    processedUpscaledTensor.dispose();
                    return [4, __await(squeezedTensor_2)];
                case 29: return [2, _g.sent()];
                case 30:
                    if (progress) {
                        (0, utils_1.warn)(exports.WARNING_PROGRESS_WITHOUT_PATCH_SIZE);
                    }
                    prediction = model.predict(pixels);
                    return [4, __await([prediction,])];
                case 31: return [4, _g.sent()];
                case 32:
                    _g.sent();
                    postprocessedTensor = (0, utils_1.processAndDisposeOfTensor)(prediction.clone(), modelDefinition.postprocess, (0, utils_1.scaleOutput)(modelDefinition.outputRange), (0, utils_1.trimInput)(imageSize, scale));
                    prediction.dispose();
                    return [4, __await([postprocessedTensor,])];
                case 33: return [4, _g.sent()];
                case 34:
                    _g.sent();
                    squeezedTensor = postprocessedTensor.squeeze();
                    postprocessedTensor.dispose();
                    return [4, __await(squeezedTensor)];
                case 35: return [2, _g.sent()];
            }
        });
    });
}
exports.predict = predict;
var getCopyOfInput = function (input) { return ((0, core_1.isTensor)(input) ? input.clone() : input); };
exports.getCopyOfInput = getCopyOfInput;
function upscale(input, args, _a) {
    var model = _a.model, modelDefinition = _a.modelDefinition;
    return __asyncGenerator(this, arguments, function upscale_1() {
        var parsedInput, startingPixels, imageSize, inputSize, preprocessedPixels, gen, result, upscaledPixels, base64Src;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    parsedInput = (0, exports.getCopyOfInput)(input);
                    return [4, __await((0, image_generated_1.getImageAsTensor)(parsedInput))];
                case 1:
                    startingPixels = _b.sent();
                    return [4, __await(startingPixels)];
                case 2: return [4, _b.sent()];
                case 3:
                    _b.sent();
                    imageSize = startingPixels.shape;
                    inputSize = (0, utils_1.getInputShape)(model);
                    preprocessedPixels = (0, utils_1.processAndDisposeOfTensor)(startingPixels, modelDefinition.preprocess, (0, utils_1.scaleIncomingPixels)(modelDefinition.inputRange), (0, utils_1.padInput)(inputSize));
                    return [4, __await(preprocessedPixels)];
                case 4: return [4, _b.sent()];
                case 5:
                    _b.sent();
                    gen = predict(preprocessedPixels, args, {
                        model: model,
                        modelDefinition: modelDefinition,
                    }, {
                        imageSize: imageSize,
                        inputSize: inputSize,
                    });
                    return [4, __await(gen.next())];
                case 6:
                    result = _b.sent();
                    return [4, __await(result.value)];
                case 7: return [4, _b.sent()];
                case 8:
                    _b.sent();
                    _b.label = 9;
                case 9:
                    if (!!result.done) return [3, 20];
                    return [4, __await(gen.next())];
                case 10:
                    result = _b.sent();
                    if (!Array.isArray(result.value)) return [3, 13];
                    return [4, __await(__spreadArray(__spreadArray([], result.value, true), [preprocessedPixels,], false))];
                case 11: return [4, _b.sent()];
                case 12:
                    _b.sent();
                    return [3, 19];
                case 13:
                    if (!(0, core_1.isTensor)(result.value)) return [3, 16];
                    return [4, __await([result.value, preprocessedPixels,])];
                case 14: return [4, _b.sent()];
                case 15:
                    _b.sent();
                    return [3, 19];
                case 16: return [4, __await(preprocessedPixels)];
                case 17: return [4, _b.sent()];
                case 18:
                    _b.sent();
                    _b.label = 19;
                case 19: return [3, 9];
                case 20:
                    preprocessedPixels.dispose();
                    upscaledPixels = result.value;
                    if (!(args.output === 'tensor')) return [3, 22];
                    return [4, __await(upscaledPixels)];
                case 21: return [2, _b.sent()];
                case 22:
                    base64Src = (0, image_generated_1.tensorAsBase64)(upscaledPixels);
                    upscaledPixels.dispose();
                    return [4, __await(base64Src)];
                case 23: return [2, _b.sent()];
            }
        });
    });
}
exports.upscale = upscale;
function cancellableUpscale(input, _a, internalArgs) {
    var signal = _a.signal, awaitNextFrame = _a.awaitNextFrame, args = __rest(_a, ["signal", "awaitNextFrame"]);
    return __awaiter(this, void 0, void 0, function () {
        var tick, upscaledPixels;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    (0, image_generated_1.checkValidEnvironment)(input, {
                        output: args.output,
                        progressOutput: args.progressOutput,
                    });
                    tick = (0, makeTick_1.makeTick)(signal || internalArgs.signal, awaitNextFrame);
                    return [4, tick()];
                case 1:
                    _b.sent();
                    return [4, (0, utils_1.wrapGenerator)(upscale(input, args, internalArgs), tick)];
                case 2:
                    upscaledPixels = _b.sent();
                    return [4, tick()];
                case 3:
                    _b.sent();
                    return [2, upscaledPixels];
            }
        });
    });
}
exports.cancellableUpscale = cancellableUpscale;
