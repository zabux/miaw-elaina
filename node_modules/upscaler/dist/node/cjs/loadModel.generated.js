"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadModel = exports.getModelPath = exports.getModuleFolder = exports.getMissingMatchesError = void 0;
var path_1 = __importDefault(require("path"));
var utils_1 = require("./utils");
var resolver_1 = require("./resolver");
var core_1 = require("@upscalerjs/core");
var getMissingMatchesError = function (moduleEntryPoint) { return new Error("No matches could be found for module entry point ".concat(moduleEntryPoint)); };
exports.getMissingMatchesError = getMissingMatchesError;
var DIST_REGEXP = new RegExp('(.*)dist');
var getModuleFolder = function (name) {
    var _a;
    var moduleEntryPoint = (0, resolver_1.resolver)(name);
    var match = (_a = moduleEntryPoint.match(DIST_REGEXP)) === null || _a === void 0 ? void 0 : _a.pop();
    if (!match) {
        throw (0, exports.getMissingMatchesError)(moduleEntryPoint);
    }
    return match;
};
exports.getModuleFolder = getModuleFolder;
var getModelPath = function (_a) {
    var packageInformation = _a.packageInformation, modelPath = _a.path;
    if (packageInformation) {
        var moduleFolder = (0, exports.getModuleFolder)(packageInformation.name);
        return "file://".concat(path_1.default.resolve(moduleFolder, modelPath));
    }
    return modelPath;
};
exports.getModelPath = getModelPath;
var loadModel = function (modelDefinition) { return __awaiter(void 0, void 0, void 0, function () {
    var modelPath, model;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                try {
                    (0, core_1.isValidModelDefinition)(modelDefinition);
                }
                catch (err) {
                    throw err instanceof core_1.ModelDefinitionValidationError ? (0, utils_1.getModelDefinitionError)(err.type, modelDefinition) : new Error(utils_1.ERROR_MODEL_DEFINITION_BUG);
                }
                modelPath = (0, exports.getModelPath)(modelDefinition);
                return [4, (0, utils_1.loadTfModel)(modelPath, modelDefinition.modelType)];
            case 1:
                model = _a.sent();
                return [2, {
                        model: model,
                        modelDefinition: modelDefinition,
                    }];
        }
    });
}); };
exports.loadModel = loadModel;
