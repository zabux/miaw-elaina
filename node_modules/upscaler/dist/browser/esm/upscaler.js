import { DefaultUpscalerModel, } from './dependencies.generated';
import { getUpscaleOptions, } from './args.generated';
import { loadModel, } from './loadModel.generated';
import { cancellableWarmup, } from './warmup';
import { cancellableUpscale, } from './upscale';
import { getModel, } from './utils';
const DEFAULT_MODEL = DefaultUpscalerModel;
export class Upscaler {
    _opts;
    _model;
    ready;
    _abortController = new AbortController();
    constructor(opts = {}) {
        this._opts = {
            ...opts,
        };
        this._model = loadModel(getModel(this._opts.model || DEFAULT_MODEL));
        this.ready = new Promise((resolve, reject) => {
            this._model.then(() => cancellableWarmup(this._model, (this._opts.warmupSizes || []), undefined, {
                signal: this._abortController.signal,
            })).then(resolve).catch(reject);
        });
    }
    async execute(image, options) {
        await this.ready;
        const { model, modelDefinition, } = await this._model;
        return cancellableUpscale(image, getUpscaleOptions(model, options), {
            model,
            modelDefinition,
            signal: this._abortController.signal,
        });
    }
    upscale = this.execute.bind(this);
    warmup = async (warmupSizes = [], options) => {
        await this.ready;
        return cancellableWarmup(this._model, warmupSizes, options, {
            signal: this._abortController.signal,
        });
    };
    abort = () => {
        this._abortController.abort();
        this._abortController = new AbortController();
    };
    dispose = async () => {
        await this.ready;
        const { model, } = await this._model;
        model.dispose();
    };
    getModel = () => this._model;
}
export default Upscaler;
